// automatically generated by the FlatBuffers compiler, do not modify

package uk.ac.bristol.star.fbs.feather;

import java.nio.*;
import java.lang.*;
import java.util.*;
import uk.ac.bristol.star.fbs.google.*;

@SuppressWarnings("unused")
public final class CTable extends Table {
  public static CTable getRootAsCTable(ByteBuffer _bb) { return getRootAsCTable(_bb, new CTable()); }
  public static CTable getRootAsCTable(ByteBuffer _bb, CTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public CTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Some text (or a name) metadata about what the file is, optional
   */
  public String description() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long numRows() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public Column columns(int j) { return columns(new Column(), j); }
  public Column columns(Column obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int columnsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  /**
   * Version number of the Feather format
   */
  public int version() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Table metadata (likely JSON), not yet used
   */
  public String metadata() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer metadataAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer metadataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createCTable(FlatBufferBuilder builder,
      int descriptionOffset,
      long num_rows,
      int columnsOffset,
      int version,
      int metadataOffset) {
    builder.startObject(5);
    CTable.addNumRows(builder, num_rows);
    CTable.addMetadata(builder, metadataOffset);
    CTable.addVersion(builder, version);
    CTable.addColumns(builder, columnsOffset);
    CTable.addDescription(builder, descriptionOffset);
    return CTable.endCTable(builder);
  }

  public static void startCTable(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(0, descriptionOffset, 0); }
  public static void addNumRows(FlatBufferBuilder builder, long numRows) { builder.addLong(1, numRows, 0L); }
  public static void addColumns(FlatBufferBuilder builder, int columnsOffset) { builder.addOffset(2, columnsOffset, 0); }
  public static int createColumnsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColumnsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVersion(FlatBufferBuilder builder, int version) { builder.addInt(3, version, 0); }
  public static void addMetadata(FlatBufferBuilder builder, int metadataOffset) { builder.addOffset(4, metadataOffset, 0); }
  public static int endCTable(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishCTableBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedCTableBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

