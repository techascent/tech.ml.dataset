// automatically generated by the FlatBuffers compiler, do not modify

package uk.ac.bristol.star.fbs.feather;

import java.nio.*;
import java.lang.*;
import java.util.*;
import uk.ac.bristol.star.fbs.google.*;

@SuppressWarnings("unused")
public final class PrimitiveArray extends Table {
  public static PrimitiveArray getRootAsPrimitiveArray(ByteBuffer _bb) { return getRootAsPrimitiveArray(_bb, new PrimitiveArray()); }
  public static PrimitiveArray getRootAsPrimitiveArray(ByteBuffer _bb, PrimitiveArray obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public PrimitiveArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte encoding() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Relative memory offset of the start of the array data excluding the size
   * of the metadata
   */
  public long offset() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * The number of logical values in the array
   */
  public long length() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * The number of observed nulls
   */
  public long nullCount() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * The total size of the actual data in the file
   */
  public long totalBytes() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createPrimitiveArray(FlatBufferBuilder builder,
      byte type,
      byte encoding,
      long offset,
      long length,
      long null_count,
      long total_bytes) {
    builder.startObject(6);
    PrimitiveArray.addTotalBytes(builder, total_bytes);
    PrimitiveArray.addNullCount(builder, null_count);
    PrimitiveArray.addLength(builder, length);
    PrimitiveArray.addOffset(builder, offset);
    PrimitiveArray.addEncoding(builder, encoding);
    PrimitiveArray.addType(builder, type);
    return PrimitiveArray.endPrimitiveArray(builder);
  }

  public static void startPrimitiveArray(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addEncoding(FlatBufferBuilder builder, byte encoding) { builder.addByte(1, encoding, 0); }
  public static void addOffset(FlatBufferBuilder builder, long offset) { builder.addLong(2, offset, 0L); }
  public static void addLength(FlatBufferBuilder builder, long length) { builder.addLong(3, length, 0L); }
  public static void addNullCount(FlatBufferBuilder builder, long nullCount) { builder.addLong(4, nullCount, 0L); }
  public static void addTotalBytes(FlatBufferBuilder builder, long totalBytes) { builder.addLong(5, totalBytes, 0L); }
  public static int endPrimitiveArray(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

